/*
 * Control de 4 Rel√©s ESP32 con Adafruit IO
 * Compatible con la aplicaci√≥n web desarrollada
 * 
 * Pines utilizados:
 * - GPIO 7: Rel√© 1
 * - GPIO 8: Rel√© 2  
 * - GPIO 9: Rel√© 3
 * - GPIO 10: Rel√© 4
 */

#include <WiFi.h>
#include <Adafruit_MQTT.h>
#include <Adafruit_MQTT_Client.h>

// ==== Configuraci√≥n WiFi ====
const char* ssid = "TU_RED_WIFI";        // Cambia por tu red WiFi
const char* password = "TU_PASSWORD";    // Cambia por tu contrase√±a WiFi

// ==== Pines para rel√©s (activaci√≥n por transistor C945) ====
const int rele1 = 7;   // GPIO7
const int rele2 = 8;   // GPIO8
const int rele3 = 9;   // GPIO9
const int rele4 = 10;  // GPIO10

// ==== Configuraci√≥n Adafruit IO ====
#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883
#define AIO_USERNAME    "tu_usuario"                    // Tu usuario de Adafruit IO
#define AIO_KEY         "tu_clave" // Tu clave de Adafruit IO

// ==== Nombres de los feeds ====
#define FEED1 "rele1"
#define FEED2 "rele2"
#define FEED3 "rele3"
#define FEED4 "rele4"

// ==== Cliente MQTT ====
WiFiClient client;
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

// ==== Suscripciones a los feeds ====
Adafruit_MQTT_Subscribe feedRele1 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/" FEED1);
Adafruit_MQTT_Subscribe feedRele2 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/" FEED2);
Adafruit_MQTT_Subscribe feedRele3 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/" FEED3);
Adafruit_MQTT_Subscribe feedRele4 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/" FEED4);

// ==== Funci√≥n para conectar a MQTT ====
void MQTT_connect() {
  int8_t ret;
  if (mqtt.connected()) return;

  Serial.print("Conectando a MQTT... ");
  while ((ret = mqtt.connect()) != 0) {
    Serial.println(mqtt.connectErrorString(ret));
    Serial.println("Reintentando conexi√≥n MQTT en 5 segundos...");
    mqtt.disconnect();
    delay(5000);
  }
  Serial.println("¬°Conectado a MQTT!");
}

// ==== Funci√≥n para mostrar estado de los rel√©s ====
void mostrarEstadoReles() {
  Serial.println("=== Estado actual de rel√©s ===");
  Serial.printf("Rel√© 1 (GPIO %d): %s\n", rele1, digitalRead(rele1) ? "ON" : "OFF");
  Serial.printf("Rel√© 2 (GPIO %d): %s\n", rele2, digitalRead(rele2) ? "ON" : "OFF");
  Serial.printf("Rel√© 3 (GPIO %d): %s\n", rele3, digitalRead(rele3) ? "ON" : "OFF");
  Serial.printf("Rel√© 4 (GPIO %d): %s\n", rele4, digitalRead(rele4) ? "ON" : "OFF");
  Serial.println("=============================");
}

void setup() {
  // Inicializar comunicaci√≥n serie
  Serial.begin(115200);
  Serial.println("=== Control de 4 Rel√©s ESP32 ===");
  Serial.println("Iniciando sistema...");

  // Configurar pines de los rel√©s como salidas
  pinMode(rele1, OUTPUT);
  pinMode(rele2, OUTPUT);
  pinMode(rele3, OUTPUT);
  pinMode(rele4, OUTPUT);

  // Inicializar todos los rel√©s en estado OFF (LOW)
  digitalWrite(rele1, LOW);
  digitalWrite(rele2, LOW);
  digitalWrite(rele3, LOW);
  digitalWrite(rele4, LOW);
  
  Serial.println("Rel√©s inicializados en estado OFF");

  // Conectar a WiFi
  WiFi.begin(ssid, password);
  Serial.printf("Conectando a WiFi: %s", ssid);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.println("¬°Conectado a WiFi!");
  Serial.printf("Direcci√≥n IP: %s\n", WiFi.localIP().toString().c_str());
  Serial.printf("Se√±al WiFi: %d dBm\n", WiFi.RSSI());

  // Suscribirse a los feeds de Adafruit IO
  mqtt.subscribe(&feedRele1);
  mqtt.subscribe(&feedRele2);
  mqtt.subscribe(&feedRele3);
  mqtt.subscribe(&feedRele4);
  
  Serial.println("Suscrito a feeds de Adafruit IO:");
  Serial.printf("- %s/feeds/%s\n", AIO_USERNAME, FEED1);
  Serial.printf("- %s/feeds/%s\n", AIO_USERNAME, FEED2);
  Serial.printf("- %s/feeds/%s\n", AIO_USERNAME, FEED3);
  Serial.printf("- %s/feeds/%s\n", AIO_USERNAME, FEED4);
  
  mostrarEstadoReles();
  Serial.println("Sistema listo para recibir comandos...");
}

void loop() {
  // Mantener conexi√≥n MQTT
  MQTT_connect();

  // Leer mensajes de los feeds
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(100))) {
    String valor = (char *)subscription->lastread;
    String feed = String(subscription->topic);
    
    // Extraer nombre del feed
    int feedStart = feed.lastIndexOf('/') + 1;
    String feedName = feed.substring(feedStart);
    
    Serial.printf("üì® Comando recibido - Feed: %s, Valor: %s\n", feedName.c_str(), valor.c_str());

    // Procesar comando para cada rel√©
    if (subscription == &feedRele1) {
      digitalWrite(rele1, (valor == "ON") ? HIGH : LOW);
      Serial.printf("üîå Rel√© 1 (GPIO %d): %s\n", rele1, (valor == "ON") ? "ENCENDIDO" : "APAGADO");
    }
    else if (subscription == &feedRele2) {
      digitalWrite(rele2, (valor == "ON") ? HIGH : LOW);
      Serial.printf("üîå Rel√© 2 (GPIO %d): %s\n", rele2, (valor == "ON") ? "ENCENDIDO" : "APAGADO");
    }
    else if (subscription == &feedRele3) {
      digitalWrite(rele3, (valor == "ON") ? HIGH : LOW);
      Serial.printf("üîå Rel√© 3 (GPIO %d): %s\n", rele3, (valor == "ON") ? "ENCENDIDO" : "APAGADO");
    }
    else if (subscription == &feedRele4) {
      digitalWrite(rele4, (valor == "ON") ? HIGH : LOW);
      Serial.printf("üîå Rel√© 4 (GPIO %d): %s\n", rele4, (valor == "ON") ? "ENCENDIDO" : "APAGADO");
    }
  }

  // Verificar conexi√≥n WiFi
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ö†Ô∏è  Conexi√≥n WiFi perdida. Reconectando...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("\n‚úÖ WiFi reconectado");
  }

  // Ping peri√≥dico para mantener conexi√≥n MQTT
  if (!mqtt.ping()) {
    mqtt.disconnect();
  }
  
  delay(100); // Peque√±a pausa para no saturar el procesador
}
